package com.hongxiang.kforthirtysix.favouritesql;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hongxiang.kforthirtysix.favouritesql.FavouriteText;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVOURITE_TEXT".
*/
public class FavouriteTextDao extends AbstractDao<FavouriteText, Long> {

    public static final String TABLENAME = "FAVOURITE_TEXT";

    /**
     * Properties of entity FavouriteText.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Writer = new Property(2, String.class, "writer", false, "WRITER");
        public final static Property Urlid = new Property(3, String.class, "urlid", false, "URLID");
        public final static Property Imgurl = new Property(4, String.class, "imgurl", false, "IMGURL");
    };


    public FavouriteTextDao(DaoConfig config) {
        super(config);
    }
    
    public FavouriteTextDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVOURITE_TEXT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"WRITER\" TEXT," + // 2: writer
                "\"URLID\" TEXT," + // 3: urlid
                "\"IMGURL\" TEXT);"); // 4: imgurl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVOURITE_TEXT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FavouriteText entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String writer = entity.getWriter();
        if (writer != null) {
            stmt.bindString(3, writer);
        }
 
        String urlid = entity.getUrlid();
        if (urlid != null) {
            stmt.bindString(4, urlid);
        }
 
        String imgurl = entity.getImgurl();
        if (imgurl != null) {
            stmt.bindString(5, imgurl);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public FavouriteText readEntity(Cursor cursor, int offset) {
        FavouriteText entity = new FavouriteText( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // writer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // urlid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // imgurl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FavouriteText entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWriter(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrlid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImgurl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FavouriteText entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(FavouriteText entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
